{# <div class="d-flex {{ is_granted('ROLE_ADMIN') ? 'justify-content-evenly' : 'justify-content-center' }}"> #}
<div class="d-flex justify-content-evenly">
    {% if is_granted('ROLE_ADMIN') %}
        <a href="{{ path('app_calendar_index') }}">Gérer le calendrier</a>
    {% endif %}
</div>

<div id="calendrier" data-is-admin="{% if is_granted('ROLE_ADMIN') %}true{% else %}false{% endif %}"></div>


<!-- Modal -->
<div class="modal fade" id="showEvent" tabindex="-1" aria-labelledby="modal-calendrier" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header"></div>
            <div class="modal-body"></div>
            <div class="modal-footer"></div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded',
        () => {
            const lang = 'fr-FR';
            let calendarElt = document.querySelector('#calendrier')
            const isAdmin = calendarElt.dataset.isAdmin === 'true';
            let calendar = new FullCalendar.Calendar(calendarElt, {
                aspectRatio: 1.5,
                initialView: 'dayGridMonth',
                locale: 'fr',
                timeZone: 'Europe/Paris',
                themeSystem: 'bootstrap5',
                headerToolbar: {
                    start: 'prevYear,prev,next,nextYear today',
                    center: 'title',
                    right: 'dayGridMonth,dayGridWeek listWeek',
                },
                buttonIcons: {
                    prev: 'arrow-left',
                    next: 'arrow-right',
                    prevYear: 'chevron-bar-left',
                    nextYear: 'chevron-bar-right',
                },
                // Dans l'agenda, afficher les événements sur une seule ligne
                allDayText: 'Journée',
                // Les boutons en français
                buttonText: {
                    today: 'Aujourd\'hui',
                    month: 'Mois',
                    week: 'Semaine',
                    day: 'Jour',
                    list: 'Agenda',
                    days: 'Jours',
                },
                // Affichage des numéros de semaine
                weekNumbers: true,
                // Préfixe des numéros de semaine
                weekText: '',
                editable: {{ is_granted('ROLE_ADMIN') ? 'true' : 'false' }},
                //editable: 'true',
                moreLinkText: 'voir plus',
                noEventsText: 'Aucun événement à afficher',
                // Redimensionnement des événements depuis le début
                eventResizableFromStart: true,
                // Indicateur de l'heure actuelle sur l'agenda
                nowIndicator: true,
                // Commence la semaine le lundi
                firstDay: 1,
                // Format de l'heure
                eventTimeFormat: {
                    hour: '2-digit', // 2 chiffres pour l'heure
                    minute: '2-digit', // 2 chiffres pour les minutes
                    hour12: false // Affichage de l'heure en 24h
                },
                events: {{ data|raw }},
            })

            calendar.on('eventChange', (e) => {
                let url = `/api/calendrier/${e.event.id}/edit`
                // log description
                console.log(e.event)

                let datas = {
                    "title": e.event.title,
                    "description": e.event.extendedProps.description,
                    "start": e.event.start,
                    "end": e.event.end,
                    "backgroundColor": e.event.backgroundColor,
                    "borderColor": e.event.borderColor,
                    "textColor": e.event.textColor,
                    "allDay": e.event.allDay,
                    "recurrent": e.event.recurrent,
                }
                console.log(datas)

                // Save event with xhr
                let xhr = new XMLHttpRequest()

                xhr.open('PUT', url, true)
                xhr.setRequestHeader('Content-Type', 'application/json')
                xhr.send(JSON.stringify(datas))

            })

            calendar.on('eventClick', (data) => {
                let id = data.event.id;
                let title = data.event.title;
                let description = data.event.extendedProps.description || 'Aucune description disponible';
                let start = data.event.start;
                let end = data.event.end;

                // Si la durée n'est pas définis la calculer à partir de l'heure de la date de début et de fin
                let duration = data.event.duration ? data.event.duration : end - start;
                // Si les heures sont inférieurs à 10, ajouter un 0 devant
                let hours = Math.floor(duration / 3600000);
                if (hours < 10) {
                    hours = '0' + hours;
                }
                // Si les minutes sont inférieurs à 10, ajouter un 0 devant
                let minutes = Math.floor((duration % 3600000) / 60000);
                if (minutes < 10) {
                    minutes = '0' + minutes;
                }

                duration = hours + 'h' + minutes;

                // Récupération des données de récurrence (si disponibles) via extendedProps
                let recurrent = data.event.extendedProps.recurrent;
                let startRecur = data.event.startRecur;
                let startTime = data.event.startTime;
                let endRecur = data.event.endRecur;
                let endTime = data.event.endTime;
                let daysOfWeek = data.event.daysOfWeek;
                const {joursSemaine: joursSemaine} = data.event.extendedProps;

                // Récupérer les dates et heures au format UTC pour éviter les problèmes de décalage horaire
                let startUTC = data.event.start.toUTCString();
                let endUTC = data.event.end.toUTCString();

                // Créer des objets Date à partir des dates et heures au format UTC
                let startAdjusted = new Date(startUTC);
                let endAdjusted = new Date(endUTC);

                // Ajouter le décalage horaire entre le fuseau horaire du calendrier et celui du navigateur
                startAdjusted.setMinutes(startAdjusted.getMinutes() + startAdjusted.getTimezoneOffset());
                endAdjusted.setMinutes(endAdjusted.getMinutes() + endAdjusted.getTimezoneOffset());

                // Formatage de la date et heure de début et de fin ajustées
                let startTimeFormatted = `${startAdjusted.getHours()}h${String(startAdjusted.getMinutes()).padStart(2, '0')}`;
                let endTimeFormatted = `${endAdjusted.getHours()}h${String(endAdjusted.getMinutes()).padStart(2, '0')}`;

                // copy data.event in file in json format for debug
                let event = JSON.stringify(data.event);

                // Afficher le Modal
                let modal = new bootstrap.Modal(document.querySelector('#showEvent'));
                // Obtenez la référence vers le contenu du Modal
                let modalContent = document.querySelector('#showEvent .modal-content');
                modalContent.innerHTML = `
                <div class="modal-header">
                    <h1 class="modal-title fs-5">${title}</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <p><strong>Description :</strong> ${description}</p>
                    </div>
                    <div class="row">
                        <div class="col-xs-12">
                        <!-- Afficher la date de début au format de date 'fr' d/m/Y -->
                            <p><strong>Début :</strong>
                                ${start.toLocaleDateString(lang)} à ${startTimeFormatted}
                            </p>
                            <p><strong>Fin :</strong>
                                ${end.toLocaleDateString(lang)} à ${endTimeFormatted}
                            </p>
                            <p><strong>Durée :</strong> ${duration}</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="d-flex justify-content-between mx-auto">
                        <a id="btn-edit" href="/calendrier/${id}/modifier" class="btn btn-primary me-2">Modifier</a>
                        <a id="btn-show" href="/calendrier/" class="btn btn-purple me-2">Gérer les événements</a>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                    </div>
                </div>
            `;

                /**
                 * Si l'utilisateur est un ADMIN, j'affiche les boutons dans le footer dans le Modal
                 */
                if (!isAdmin) {
                    const btnEdit = document.getElementById('btn-edit');
                    const btnShow = document.getElementById('btn-show');

                    if (btnEdit) {
                        btnEdit.remove();
                    }

                    if (btnShow) {
                        btnShow.remove();
                    }
                }

                /**
                 * Afficher le Modal
                 */
                modal.show();
            });
            calendar.render();
        })
</script>
